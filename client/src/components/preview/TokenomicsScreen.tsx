import { motion } from 'framer-motion';
import { PieChart } from 'recharts';
import { 
  Droplets, 
  TrendingUp, 
  Layers, 
  Shield 
} from 'lucide-react';

interface TokenomicsScreenProps {
  onNext: () => void;
}

export default function TokenomicsScreen({ onNext }: TokenomicsScreenProps) {
  const tokenFeatures = [
    {
      icon: <Droplets className="h-5 w-5 text-primary" />,
      title: "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω VOD",
      description: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã, –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞ –≤ DAO"
    },
    {
      icon: <TrendingUp className="h-5 w-5 text-primary" />,
      title: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞",
      description: "–°—Ç–µ–π–∫–∏–Ω–≥, –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥, —Ä–æ—Å—Ç —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã"
    },
    {
      icon: <Layers className="h-5 w-5 text-primary" />,
      title: "–°—É–±—Ç–æ–∫–µ–Ω—ã",
      description: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
    },
    {
      icon: <Shield className="h-5 w-5 text-primary" />,
      title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      description: "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
    }
  ];

  const allocation = [
    { name: '–†–µ–∑–µ—Ä–≤ DAO', value: 30 },
    { name: '–ö–æ–º–∞–Ω–¥–∞', value: 15 },
    { name: '–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã', value: 25 },
    { name: '–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞', value: 20 },
    { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', value: 10 }
  ];

  // –¶–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
  const colors = [
    'rgba(20, 184, 166, 0.8)',  // primary
    'rgba(20, 184, 166, 0.6)',
    'rgba(20, 184, 166, 0.4)',
    'rgba(20, 184, 166, 0.3)',
    'rgba(20, 184, 166, 0.2)'
  ];

  // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const titleVariants = {
    initial: { opacity: 0, y: -20 },
    animate: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: 0.8,
        ease: "easeOut"
      }
    }
  };
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –±–ª–æ–∫–æ–≤
  const featureVariants = {
    initial: { opacity: 0, y: 20 },
    animate: (i: number) => ({ 
      opacity: 1, 
      y: 0,
      transition: {
        delay: 0.2 + (i * 0.15),
        duration: 0.5,
        ease: "easeOut"
      }
    })
  };
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  const percentVariants = {
    initial: { opacity: 0, scale: 0.8 },
    animate: (i: number) => ({ 
      opacity: 1, 
      scale: 1,
      transition: {
        delay: 1 + (i * 0.1),
        duration: 0.3,
        ease: "easeOut"
      }
    })
  };

  return (
    <div 
      className="w-full h-full flex flex-col items-center justify-center relative p-4"
      onClick={onNext}
    >
      {/* –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-background to-background"></div>
      <div className="absolute inset-0 bg-[url('/hexagonal-grid.svg')] opacity-15"></div>
      
      <div className="relative z-10 max-w-5xl w-full">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          className="text-center mb-10"
          variants={titleVariants}
          initial="initial"
          animate="animate"
        >
          <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
            –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞
          </h2>
          <p className="text-lg text-white/70">
            –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã VODeco
          </p>
        </motion.div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–∞ */}
          <div className="md:col-span-2 space-y-4">
            {tokenFeatures.map((feature, index) => (
              <motion.div
                key={index}
                className="bg-card/30 backdrop-blur-sm rounded-lg border border-primary/20 p-4 hover:border-primary/40 hover:shadow-md hover:shadow-primary/10 transition-all"
                variants={featureVariants}
                custom={index}
                initial="initial"
                animate="animate"
                whileHover={{ y: -3, transition: { duration: 0.2 } }}
              >
                <div className="flex items-start">
                  <div className="p-2 rounded-full bg-primary/10 w-fit mr-4 flex-shrink-0">
                    {feature.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white mb-1">{feature.title}</h3>
                    <p className="text-sm text-white/70">{feature.description}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ */}
          <div className="flex flex-col">
            <motion.div
              className="bg-card/30 backdrop-blur-sm rounded-lg border border-primary/20 p-4 h-full"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.8, duration: 0.5 }}
            >
              <h3 className="text-lg font-bold text-white mb-4 text-center">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</h3>
              
              {/* –°—Ö–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ recharts) */}
              <div className="space-y-3">
                {allocation.map((item, index) => (
                  <motion.div 
                    key={index}
                    className="flex items-center justify-between"
                    variants={percentVariants}
                    custom={index}
                    initial="initial"
                    animate="animate"
                  >
                    <div className="flex items-center">
                      <div 
                        className="w-3 h-3 rounded-full mr-2"
                        style={{ backgroundColor: colors[index % colors.length] }}
                      ></div>
                      <span className="text-sm text-white">{item.name}</span>
                    </div>
                    <span className="text-sm font-medium text-primary">{item.value}%</span>
                  </motion.div>
                ))}
              </div>
              
              {/* –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
              <div className="w-full h-2 bg-primary/10 rounded-full mt-6 overflow-hidden">
                {allocation.map((item, index) => {
                  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                  const prevTotal = allocation
                    .slice(0, index)
                    .reduce((sum, curr) => sum + curr.value, 0);
                  
                  return (
                    <motion.div
                      key={index}
                      className="h-full absolute"
                      style={{ 
                        backgroundColor: colors[index % colors.length],
                        width: `${item.value}%`,
                        left: `${prevTotal}%`
                      }}
                      initial={{ scaleX: 0 }}
                      animate={{ scaleX: 1 }}
                      transition={{ 
                        delay: 1.3 + (index * 0.1), 
                        duration: 0.5,
                        ease: "easeOut"
                      }}
                    />
                  );
                })}
              </div>
            </motion.div>
          </div>
        </div>
      </div>
      
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
      <motion.div 
        className="absolute bottom-4 right-4 text-white/50 text-sm"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1.8 }}
      >
        –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è +5üíß
      </motion.div>
    </div>
  );
}